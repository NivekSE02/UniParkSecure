@model IEnumerable<UniParkSecure.Models.Sector>
@{
    ViewData["Title"] = "Dashboard Parqueos";
}
<!DOCTYPE html>
<html lang="es">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<title>@ViewData["Title"]</title>
<link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet" />
<style>
    body { background:#ffffff; font-family:'Inter','Segoe UI',sans-serif; color:#222; min-height:100vh; }
    h1,h2 { color:#111; }
    .subtle { color:#555; }
    .card-shadow { box-shadow:0 4px 10px rgba(0,0,0,.06), 0 1px 2px rgba(0,0,0,.05); }
    .sector-card { transition:transform .25s, box-shadow .25s; border:1px solid #e5e7eb; background:#fff; }
    .sector-card:hover { transform:translateY(-4px); box-shadow:0 10px 22px -4px rgba(0,0,0,.12); }
    .progress-wrap { position:relative; height:10px; border-radius:6px; overflow:hidden; background:#f1f5f9; }
    .progress-bar { position:absolute; inset:0; width:0; transition:width .6s cubic-bezier(.4,.11,.2,1), background-color .4s; }
    .badge { font-size:.60rem; letter-spacing:.5px; font-weight:600; padding:.30rem .55rem; border-radius:999px; text-transform:uppercase; line-height:1; }
    .status-free { background:#e6f9f1; color:#065f46; border:1px solid #16a34a33; }
    .status-mid { background:#fff3e0; color:#92400e; border:1px solid #f59e0b33; }
    .status-full { background:#fde2e1; color:#7f1d1d; border:1px solid #dc262633; }
    .header-gradient { background:linear-gradient(90deg,#111,#444); -webkit-background-clip:text; color:transparent; }
    .nav-bar { position:sticky; top:0; z-index:40; background:#ffffff; border-bottom:1px solid #e5e7eb; box-shadow:0 2px 4px rgba(0,0,0,.04); }
    .nav-inner { max-width:1200px; margin:0 auto; display:flex; align-items:center; gap:2.5rem; padding:.85rem 1.75rem; }
    .nav-link { font-weight:600; font-size:.9rem; color:#555; text-decoration:none; padding:.55rem .95rem; border-radius:6px; transition:.2s; }
    .nav-link:hover { background:#f3f4f6; color:#111; }
    .nav-link.active { background:#111; color:#fff; }
    .divider { height:1px; background:#e5e7eb; margin:1.25rem 0; }
</style>
</head>
<body>
    <nav class="nav-bar">
        <div class="nav-inner">
            <a class="nav-link @(ViewContext.RouteData.Values["action"]?.ToString()=="DashboardAdmin"?"active":"")" href="@Url.Action("DashboardAdmin","Home")">Historial</a>
            <a class="nav-link @(ViewContext.RouteData.Values["action"]?.ToString()=="DashboardEntrada"?"active":"")" href="@Url.Action("DashboardEntrada","Home")">Entrada</a>
            <a class="nav-link @(ViewContext.RouteData.Values["action"]?.ToString()=="DashboardSalida"?"active":"")" href="@Url.Action("DashboardSalida","Home")">Salida</a>
            <a class="nav-link active" href="@Url.Action("DashboardParqueos","Home")">Parqueos</a>
        </div>
    </nav>

    <div class="max-w-7xl mx-auto px-6 pt-10 pb-10">
        <div class="flex flex-col md:flex-row md:items-end md:justify-between gap-6 mb-8">
            <div>
                <h1 class="text-3xl font-extrabold tracking-tight header-gradient">Estado de Parqueos</h1>
                <p class="subtle mt-1 text-sm">Capacidad y disponibilidad en tiempo real por sector.</p>
            </div>
        </div>

        <div id="gridSectores" class="grid gap-6 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4"></div>
        <div id="emptyMessage" class="hidden mt-20 text-center text-gray-500">No hay sectores registrados.</div>
    </div>

<script>
    const grid = document.getElementById('gridSectores');
    const emptyMsg = document.getElementById('emptyMessage');

    const friendly = { 'A':'Edificio A','B':'Edificio B','C':'Edificio C','E':'Edificio E','G':'Edificio G','V':'Biblioteca 1','V2':'Biblioteca 2','COL':'Colegio' };

    function statusClass(free,total){ if(total===0) return 'status-free'; if(free===0) return 'status-full'; const ratio=free/total; return ratio<0.5 ? 'status-mid':'status-free'; }
    function barColor(free,total){ if(total===0) return 'linear-gradient(90deg,#0891b2,#0ea5e9)'; if(free===0) return 'linear-gradient(90deg,#dc2626,#b91c1c)'; const ratio=free/total; if(ratio<0.5) return 'linear-gradient(90deg,#f59e0b,#d97706)'; return 'linear-gradient(90deg,#16a34a,#059669)'; }
    function occupancyPercent(free,total){ if(total===0) return 0; return ((total-free)/total)*100; }
    function formatStats(free,total){ const occupied= total-free; return `${free} libres de ${total} (ocupados: ${occupied})`; }

    function render(data){
        grid.innerHTML='';
        if(!data || data.length===0){ emptyMsg.classList.remove('hidden'); return; }
        emptyMsg.classList.add('hidden');
        data.forEach(s=>{
            const nameKey=(s.nombre||'').toUpperCase();
            const displayName=friendly[nameKey] || s.nombre || 'Sector';
            const free = s.disponibles ?? 0; const total = s.totalEspacios ?? 0;
            const pctOcc=occupancyPercent(free,total); const barPct=pctOcc.toFixed(1)+'%';
            const badgeCls=statusClass(free,total);
            const card=document.createElement('div');
            card.className='sector-card rounded-xl p-5 transition duration-300 relative overflow-hidden';
            card.innerHTML=`<div class=\"flex items-start justify-between mb-4\">\n <div>\n  <h2 class=\"text-lg font-semibold\">${displayName}</h2>\n </div>\n <span class=\"badge ${badgeCls}\" data-free=\"${free}\" data-total=\"${total}\"></span>\n</div>\n<div class=\"mb-3\">\n <div class=\"flex justify-between text-xs mb-1 subtle\"><span>Ocupación</span><span>${barPct}</span></div>\n <div class=\"progress-wrap\"><div class=\"progress-bar\" style=\"width:${pctOcc}%; background:${barColor(free,total)};\"></div></div>\n</div>\n<div class=\"text-sm font-medium text-gray-700\">${formatStats(free,total)}</div>\n<div class=\"mt-3 flex gap-3 text-[11px] text-gray-500\">\n <div class=\"flex items-center gap-1\"><span class=\"inline-block w-2.5 h-2.5 rounded-full\" style=\"background:${barColor(free,total)}\"></span>Actualizado</div>\n <div>${new Date().toLocaleTimeString([], {hour:'2-digit', minute:'2-digit'})}</div>\n</div>`;
            grid.appendChild(card);
        });
        updateBadges();
    }

    function updateBadges(){
        grid.querySelectorAll('.badge').forEach(b=>{ const free=parseInt(b.getAttribute('data-free')); const total=parseInt(b.getAttribute('data-total')); if(total===0){ b.textContent='N/D'; return;} if(free===0){ b.textContent='Lleno'; b.classList.add('status-full'); return;} const ratio=free/total; b.textContent= ratio<0.5 ? 'Media':'Libre'; });
    }

    async function load(){ try{ const res=await fetch('/Home/SectoresStatus'); if(!res.ok) return; const data=await res.json(); render(data);} catch(e){ console.error('Error obteniendo sectores', e); } }

    load(); setInterval(load,7000);
</script>
</body>
</html>

