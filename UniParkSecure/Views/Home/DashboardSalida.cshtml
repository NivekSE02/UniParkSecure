@{
    ViewData["Title"] = "Dashboard Cam";
}

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="initial-scale=1,user-scalable=no,width=device-width">
    <title>@ViewData["Title"]</title>
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@600;700&family=Inter&display=swap" rel="stylesheet">
</head>
<body>
    <style>
        :root {
            --accent: #2563eb;
            --accent-soft: #fce9e9;
        }

        body {
            margin: 0;
            font-family: 'Inter','Segoe UI',sans-serif;
            background: #fff;
            color: #1f2937;
        }

        .top-actions {
            display: flex;
            justify-content: flex-start;
            align-items: center;
            max-width: 1400px;
            margin: 0 auto;
            padding: 14px 32px 0;
        }

        .back-btn {
            display: inline-flex;
            align-items: center;
            gap: .55rem;
            background: #f3f4f6;
            color: #475569;
            font-family: 'Montserrat',sans-serif;
            font-weight: 600;
            font-size: .8rem;
            letter-spacing: .5px;
            padding: .6rem 1.05rem;
            border-radius: 10px;
            text-decoration: none;
            border: 1px solid #e2e8f0;
            box-shadow: 0 2px 4px rgba(0,0,0,.05);
            transition: .25s;
        }

            .back-btn svg {
                width: 18px;
                height: 18px;
                stroke-width: 2.2;
            }

            .back-btn:hover {
                background: #e6f3f8;
                color: #1bb0ce;
                border-color: #cfe8ef;
                box-shadow: 0 4px 10px -2px rgba(27,176,206,.35);
            }

        .main-wrap {
            max-width: 1400px;
            margin: 0 auto;
            padding: 6px 32px 70px;
            display: flex;
            flex-direction: column;
            align-items: center;
            text-align: center;
        }

        .section-title {
            font-size: 2.1rem;
            font-weight: 700;
            margin: 18px 0 8px;
            letter-spacing: -.5px;
        }

        .subtitle {
            margin: 0 0 34px;
            font-size: .95rem;
            color: #64748b;
            max-width: 760px;
        }

        .scan-layout {
            display: flex;
            justify-content: center;
            align-items: center;
            width: 100%;
            padding: 10px 0 20px;
        }

        .device-frame {
            position: relative;
            width: 100%;
            max-width: 820px;
            background: #fff;
            border: 1px solid #e2e8f0;
            border-radius: 30px;
            padding: 34px 38px 52px;
            box-shadow: 0 18px 38px -14px rgba(0,0,0,.08), 0 4px 8px -2px rgba(0,0,0,.05);
        }

        .video-shell {
            position: relative;
            width: 100%;
            aspect-ratio: 16/10;
            border-radius: 24px;
            overflow: hidden;
            background: linear-gradient(135deg,#f8fafc,#f1f5f9);
            border: 1px solid #e2e8f0;
        }

        video, #overlay {
            position: absolute;
            inset: 0;
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        #overlay {
            pointer-events: none;
        }

        .status-panel {
            margin-top: 30px;
            display: flex;
            flex-direction: column;
            gap: 16px;
            align-items: center;
        }

        .status-badge {
            font-size: .55rem;
            letter-spacing: 1.1px;
            font-weight: 600;
            background: #eff6ff;
            color: #1d4ed8;
            padding: .45rem .75rem;
            border-radius: 999px;
            text-transform: uppercase;
        }

        .feedback-box {
            font-size: .9rem;
            font-weight: 500;
            background: #f8fafc;
            border: 1px solid #e2e8f0;
            padding: 18px 20px;
            border-radius: 18px;
            display: flex;
            align-items: flex-start;
            gap: .85rem;
            line-height: 1.35;
            min-height: 62px;
            width: 100%;
            max-width: 540px;
        }

        .feedback-icon {
            width: 46px;
            height: 46px;
            border-radius: 14px;
            background: #eff6ff;
            display: flex;
            align-items: center;
            justify-content: center;
            flex-shrink: 0;
            color: #1d4ed8;
            font-weight: 600;
            font-size: 1.15rem;
        }

        .indicator {
            width: 100%;
            max-width: 540px;
            height: 6px;
            background: #f1f5f9;
            border-radius: 4px;
            overflow: hidden;
            position: relative;
        }

            .indicator span {
                position: absolute;
                inset: 0;
                background: linear-gradient(90deg,#2563eb,#3b82f6);
                opacity: .45;
            }

        .footer-note {
            margin-top: 46px;
            font-size: .65rem;
            letter-spacing: .55px;
            color: #94a3b8;
            text-transform: uppercase;
        }

        .success {
            background: #ecfdf5;
        }

        .warning {
            background: #fff7ed;
        }

        .error {
            background: #fef2f2;
        }

        @@media (max-width:640px) {
            .back-btn

        {
            font-size: .72rem;
            padding: .55rem .9rem;
        }

        .section-title {
            font-size: 1.8rem;
        }

        .device-frame {
            padding: 26px 24px 44px;
        }

        }
    </style>

    <div class="top-actions">
        <a class="back-btn" href="@Url.Action("DashboardAdmin", "Home")" aria-label="Volver a Historial">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M10 19l-7-7m0 0l7-7m-7 7h18" /></svg>
            <span>Volver a Historial</span>
        </a>
    </div>

    <main class="main-wrap">
        <h1 class="section-title">Verificación Facial - Salida</h1>
        <p class="subtitle">Colócate frente a la cámara para registrar tu salida del sistema.</p>
        <div class="scan-layout">
            <div class="device-frame">
                <div class="video-shell">
                    <video id="video" autoplay muted playsinline></video>
                    <canvas id="overlay"></canvas>
                </div>
                <div class="status-panel">
                    <div class="status-badge" id="statusPhase">INICIALIZANDO</div>
                    <div id="feedback" class="feedback-box" aria-live="polite" role="status">
                        <div class="feedback-icon" id="feedbackIcon">⏳</div>
                        <div id="feedbackText">Cargando modelos de reconocimiento...</div>
                    </div>
                    <div class="indicator"><span></span></div>
                </div>
            </div>
        </div>
        <div class="footer-note">Universidad - Sistema de Control de Salida</div>
    </main>

    @section Scripts {
        <script src="~/js/face-api.min.js"></script>
        <script>
            const video=document.getElementById('video');
            const overlay=document.getElementById('overlay');
            const ctx=overlay.getContext('2d');
            const feedbackBox=document.getElementById('feedback');
            const feedbackIcon=document.getElementById('feedbackIcon');
            const feedbackText=document.getElementById('feedbackText');
            const statusPhase=document.getElementById('statusPhase');
            let matcher;
            function setState(t,m,p,i){
                feedbackBox.classList.remove('success','warning','error');
                if(t)feedbackBox.classList.add(t);
                feedbackIcon.textContent=i||'ℹ️';
                feedbackText.textContent=m;
                if(p)statusPhase.textContent=p;
            }
            Promise.all([
             faceapi.nets.tinyFaceDetector.loadFromUri('/models'),
             faceapi.nets.faceLandmark68Net.loadFromUri('/models'),
             faceapi.nets.faceRecognitionNet.loadFromUri('/models')
            ]).then(loadEmbeddings);
            async function loadEmbeddings(){
             try{
               setState(null,'Cargando datos biométricos...','CARGANDO','⏳');
               const r=await fetch('/Admin/GetEmbeddings');
               const data=await r.json();
               const labeled=data.map(u=>new faceapi.LabeledFaceDescriptors(u.nombre,[new Float32Array(u.embedding)]));
               matcher=new faceapi.FaceMatcher(labeled,0.6);
               setState('success','Modelos listos. Iniciando cámara...','LISTO','✅');
               startVideo();
             }catch(err){setState('error','Error cargando embeddings: '+err.message,'ERROR','⚠️');}
            }
            function startVideo(){
             navigator.mediaDevices.getUserMedia({video:{facingMode:'user'}})
              .then(stream=>{
                video.srcObject=stream;
                setState('warning','Buscando rostro...','ESCANEO','👁');
              }).catch(err=>setState('error','Error cámara: '+err.message,'ERROR','🚫'));
            }
            video.addEventListener('play',()=>{
             const resize=()=>{overlay.width=video.clientWidth;overlay.height=video.clientHeight;};
             resize();
             window.addEventListener('resize',resize);
             const interval=setInterval(async()=>{
               ctx.clearRect(0,0,overlay.width,overlay.height);
               const det=await faceapi.detectSingleFace(video,new faceapi.TinyFaceDetectorOptions()).withFaceLandmarks().withFaceDescriptor();
               if(det){
                 const displaySize={width:overlay.width,height:overlay.height};
                 const resized=faceapi.resizeResults(det,displaySize);
                 const box=resized.detection.box;
                 ctx.strokeStyle='rgba(37,99,235,0.9)';
                 ctx.lineWidth=3;
                 ctx.setLineDash([10,6]);
                 ctx.strokeRect(box.x,box.y,box.width,box.height);
                 const match=matcher.findBestMatch(det.descriptor);
                 if(match.label!=='unknown'){
                   setState('success',`Usuario reconocido: ${match.label}. Registrando salida...`,'VALIDADO','✅');
                   const email=match.label;
                   await fetch("/Registros/CreateSalida",{
                     method:"POST",
                     headers:{"Content-Type":"application/json"},
                     body:JSON.stringify({ email })
                   });
                   setTimeout(()=>{window.location.href="/Home/DashboardAdmin";},1000);
                   video.srcObject.getTracks().forEach(t=>t.stop());
                   clearInterval(interval);
                 }else{
                   setState('warning','Rostro detectado pero no coincide. Intenta de nuevo.','NO COINCIDE','⚠️');
                 }
               }else{
                 setState('warning','Buscando rostro...','ESCANEO','👁');
               }
             },230);
            });
        </script>
    }
</body>
</html>
