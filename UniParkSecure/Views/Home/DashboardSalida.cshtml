@{
    ViewData["Title"] = "Dashboard Cam";
}

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="initial-scale=1,user-scalable=no,width=device-width">
    <title>@ViewData["Title"]</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@600;700&family=Open+Sans&display=swap" rel="stylesheet">
</head>
<body>
<style>
    body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        background-color: #f8f9fa;
        color: #333;
        margin: 0;
        padding: 0;
    }

    .dashboard-wrapper {
        max-width: 1000px;
        margin: 0 auto;
        padding: 80px 20px 40px 20px;
    }

    .nav-tabs {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1rem 2rem;
        list-style: none;
        margin-bottom: 40px;
        background: #ffffff;
        border-bottom: 1px solid #e5e7eb;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        position: relative;
    }

    .nav-links {
        display: flex;
        gap: 60px;
        flex-wrap: wrap;
    }

    .nav-tabs a {
        text-decoration: none;
        color: #555;
        font-family: 'Montserrat', sans-serif;
        font-weight: 600;
        font-size: 1.1rem;
        transition: color 0.3s, background 0.3s;
        padding: 0.5rem 1rem;
        border-radius: 4px;
    }

    .nav-tabs a:hover {
        color: #1bb0ce;
        background: #f3f4f6;
    }

    .nav-tabs a.active {
        color: #1bb0ce;
        background: #e6f3f8;
    }

    .user-profile {
        position: absolute;
        top: 50%;
        right: 2rem;
        transform: translateY(-50%);
        display: flex;
        align-items: center;
        z-index: 20;
    }

    .user-button {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.5rem 1rem;
        font-family: 'Montserrat', sans-serif;
        font-weight: 600;
        color: #4b5563;
        background: #f3f4f6;
        border: 1px solid #e5e7eb;
        border-radius: 4px;
        cursor: pointer;
        transition: background 0.2s, color 0.2s;
    }

    .user-button:hover {
        background: #e6f3f8;
        color: #1bb0ce;
    }

    .user-button svg {
        width: 1.25rem;
        height: 1.25rem;
    }

    .dropdown-menu {
        display: none;
        position: absolute;
        top: 100%;
        right: 0;
        background: #ffffff;
        border: 1px solid #e5e7eb;
        border-radius: 4px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        z-index: 20;
        min-width: 150px;
    }

    .dropdown-menu.show {
        display: block;
    }

    .dropdown-item {
        display: block;
        padding: 0.5rem 1rem;
        font-family: 'Montserrat', sans-serif;
        font-weight: 600;
        color: #4b5563;
        text-decoration: none;
        transition: background 0.2s, color 0.2s;
    }

    .dropdown-item:hover {
        background: #e6f3f8;
        color: #1bb0ce;
    }

    .dashboard-content {
        text-align: center;
    }

    .card {
        background-color: #fff;
        border: 1px solid #ddd;
        border-radius: 12px;
        padding: 20px;
        margin-top: 20px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        position: relative;
    }

    video, canvas {
        border-radius: 8px;
    }

    #modoSelector {
        position: fixed;
        inset: 0;
        background: rgba(30, 30, 30, 0.95);
        z-index: 1000;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        gap: 40px;
        color: white;
    }

    #modoSelector h1 {
        font-size: 2.5rem;
        font-weight: bold;
    }

    #modoSelector button {
        font-size: 2rem;
        padding: 20px 60px;
        border-radius: 18px;
        font-weight: bold;
        box-shadow: 0 6px 14px rgba(0, 0, 0, 0.4);
        transition: transform 0.2s;
        cursor: pointer;
    }

    #modoSelector button:hover {
        transform: scale(1.05);
    }
</style>

<div class="dashboard-wrapper">
    <div class="nav-tabs">
        <div class="nav-links">
            <a href="@Url.Action("DashboardAdmin", "Home")">Historial</a>
            <a href="@Url.Action("DashboardEntrada", "Home")">Entrada</a>
            <a href="@Url.Action("DashboardSalida", "Home")" class="active">Salida</a>
            <a href="@Url.Action("DashboardParqueos", "Home")">Parqueos</a>
        </div>
        <div class="user-profile">
            <button class="user-button">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                </svg>
                <span>@(ViewBag.UserName ?? "Usuario")</span>
            </button>
            <div class="dropdown-menu">
                <a href="/Home/Login" class="dropdown-item">Cerrar sesión</a>
            </div>
        </div>
    </div>

    <div class="dashboard-content">
        <h2>Verificar Rostro - Salida</h2>

        <div class="card text-center" style="max-width:480px; margin:auto; position:relative;">
            <video id="video" width="400" height="300" autoplay muted class="shadow-sm hidden"></video>
            <canvas id="overlay" width="400" height="300" 
                style="position:absolute; top:20px; left:50%; transform:translateX(-50%);"></canvas>
            <div id="feedback" class="mt-2 text-info">Iniciando reconocimiento para SALIDA...</div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/js/face-api.min.js"></script>
    <script>
        const video = document.getElementById('video');
        const overlay = document.getElementById('overlay');
        const ctx = overlay.getContext('2d');
        const feedback = document.getElementById('feedback');
        const modo = "salida";

        let matcher;

        // Convertir Base64 → Float32Array
        function base64ToFloat32Array(base64) {
            const binary = atob(base64);
            const buffer = new ArrayBuffer(binary.length);
            const view = new Uint8Array(buffer);
            for (let i = 0; i < binary.length; i++) {
                view[i] = binary.charCodeAt(i);
            }
            return new Float32Array(view.buffer);
        }

        // Cargar modelos y embeddings
        Promise.all([
            faceapi.nets.tinyFaceDetector.loadFromUri('/models'),
            faceapi.nets.faceLandmark68Net.loadFromUri('/models'),
            faceapi.nets.faceRecognitionNet.loadFromUri('/models')
        ]).then(loadEmbeddings);

        async function loadEmbeddings() {
            try {
                const response = await fetch('/Admin/GetEmbeddings');
                const data = await response.json();

                const labeledDescriptors = data.map(u =>
                    new faceapi.LabeledFaceDescriptors(
                        u.nombre,
                        [new Float32Array(u.embedding)]
                    )
                );

                matcher = new faceapi.FaceMatcher(labeledDescriptors, 0.6);
                feedback.innerText = "✅ Modelos listos, iniciando cámara...";
                startVideo();
            } catch (err) {
                feedback.classList.replace("text-info", "text-danger");
                feedback.innerText = "❌ Error cargando embeddings: " + err.message;
            }
        }

        function startVideo() {
            navigator.mediaDevices.getUserMedia({ video: true })
                .then(stream => {
                    video.srcObject = stream;
                    video.classList.remove("hidden");
                })
                .catch(err => {
                    feedback.classList.replace("text-info", "text-danger");
                    feedback.innerText = "❌ Error cámara: " + err.message;
                });
        }

        // Detección facial
        video.addEventListener('play', () => {
            const displaySize = { width: video.width, height: video.height };
            faceapi.matchDimensions(overlay, displaySize);

            const interval = setInterval(async () => {
                ctx.clearRect(0, 0, overlay.width, overlay.height);

                const detection = await faceapi.detectSingleFace(video, new faceapi.TinyFaceDetectorOptions())
                    .withFaceLandmarks()
                    .withFaceDescriptor();

                if (detection) {
                    const resized = faceapi.resizeResults(detection, displaySize);
                    const box = resized.detection.box;

                    ctx.strokeStyle = "rgba(0,255,0,0.8)";
                    ctx.lineWidth = 3;
                    ctx.setLineDash([6, 4]);
                    ctx.strokeRect(box.x, box.y, box.width, box.height);

                    const bestMatch = matcher.findBestMatch(detection.descriptor);

                    if (bestMatch.label !== "unknown") {
                        feedback.classList.replace("text-info", "text-success");
                        feedback.innerText = `✅ Usuario reconocido: ${bestMatch.label}`;

                        const usuarioEmail = bestMatch.label;

                        const resp = await fetch("/Registros/CreateSalida", {
                            method: "POST",
                            headers: { "Content-Type": "application/json" },
                            body: JSON.stringify({ email: usuarioEmail })
                        });
                        const data = await resp.json();

                        // Mensaje sobre el video
                        const overlayMsg = document.createElement("div");
                        overlayMsg.style.position = "absolute";
                        overlayMsg.style.top = "0";
                        overlayMsg.style.left = "0";
                        overlayMsg.style.width = "100%";
                        overlayMsg.style.height = "100%";
                        overlayMsg.style.backgroundColor = "rgba(0,0,0,0.8)";
                        overlayMsg.style.display = "flex";
                        overlayMsg.style.justifyContent = "center";
                        overlayMsg.style.alignItems = "center";
                        overlayMsg.style.fontSize = "2rem";
                        overlayMsg.style.color = "white";
                        overlayMsg.innerText = data.mensaje || "✅ Salida registrada correctamente";
                        document.querySelector(".card").appendChild(overlayMsg);

                        setTimeout(() => overlayMsg.remove(), 5000);

                        // Detener cámara
                        const tracks = video.srcObject.getTracks();
                        tracks.forEach(track => track.stop());
                        clearInterval(interval);
                    } else {
                        feedback.classList.replace("text-info", "text-warning");
                        feedback.innerText = "❌ Rostro no coincide con usuarios registrados.";
                    }
                } else {
                    feedback.classList.replace("text-success", "text-info");
                    feedback.innerText = "Buscando rostro...";
                }
            }, 200);
        });

        // User profile dropdown functionality
        document.addEventListener('DOMContentLoaded', () => {
            const userButton = document.querySelector('.user-button');
            const dropdownMenu = document.querySelector('.dropdown-menu');
            if (userButton && dropdownMenu) {
                userButton.addEventListener('click', (e) => {
                    e.preventDefault();
                    dropdownMenu.classList.toggle('show');
                });
                document.addEventListener('click', (e) => {
                    if (!userButton.contains(e.target) && !dropdownMenu.contains(e.target)) {
                        dropdownMenu.classList.remove('show');
                    }
                });
            }
        });
    </script>
}
</body>
</html>